name: Terraform plan
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
env:
  TF_DIR: ./terraform

jobs:
  terraform-plan:
    environment: dev
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials(OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::980069008226:role/github_actions_OIDC_role
          aws-region: us-east-1
      
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Set TF_VAR_env
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "push" && "$GITHUB_REF" == "refs/heads/main" ]]; then
            echo "TF_VAR_env=${{ vars.MY_VAR }}" >> $GITHUB_ENV
          else
            echo "TF_VAR_env=${GITHUB_REF##*/}" >> $GITHUB_ENV
          fi
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          # DEPLOY_ENVIRONMENT: ${{ job.env }}

      - name: environment variable
        run: echo "Environment is $TF_VAR_env"
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install -r requirements.txt -t python

      - name: Create layer.zip
        run: |
          zip -r ${{ env.TF_DIR }}/layer.zip python/
          rm -rf python

      - name: Terraform plan
        run: terraform plan -out=tfplan
        working-directory: ${{ env.TF_DIR }}

      - name: Upload layer.zip
        uses: actions/upload-artifact@v4
        with:
          name: layer-zip
          path: ${{ env.TF_DIR }}/layer.zip
          
      - name: Move Lambda zip files
        run: |
          mkdir -p ${{ env.TF_DIR }}/zipped_lambda
          mv /tmp/*.zip ${{ env.TF_DIR }}/zipped_lambda/ || true

      - name: Upload plan file (only on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_DIR }}/tfplan

      # - name: List terraform folder contents
      #   run: ls -lart ${{ env.TF_DIR }}
        

      - name: Upload .terraform folder contents (only on main)
        # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plugins
          path: ${{ env.TF_DIR }}/terraform-plugins.zip


      - name: Upload Lambda zip files
        # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zips
          path: ${{ env.TF_DIR }}/zipped_lambda/*.zip

      - name: Terraform apply
        run: terraform apply tfplan
        working-directory: ${{ env.TF_DIR }}

  terraform-apply:
    name: Terraform Apply (Only After Merge)
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials(OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::980069008226:role/github_actions_OIDC_role
          aws-region: us-east-1
      
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}

      - name: Download plan file
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_DIR }}

      - name: Download layer.zip
        uses: actions/download-artifact@v4
        with:
          name: layer-zip
          path: ${{ env.TF_DIR }}


      - name: Download Lambda zip files
        uses: actions/download-artifact@v4
        with:
          name: lambda-zips
          path: /tmp





      - name: List zipped lambda files in /tmp
        run: ls -la /tmp/*.zip || echo "No zip files found in /tmp"

      # - name: Wait for Manual Approval
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ secrets.GITHUB_TOKEN }}
      #     approvers: prashantsingh34

      - name: Terraform show
        run: terraform show tfplan
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform apply
        run: terraform apply tfplan
        working-directory: ${{ env.TF_DIR }}