name: Terraform plan & apply for dev workflows
on:
  pull_request:
    branches: [main]

env:
  TF_DIR: ./terraform
  BUCKET_NAME: ${{ vars.bucket }}
jobs:
  dev-terraform-plan-apply:
    environment: dev
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials(OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::980069008226:role/github_actions_OIDC_role
          aws-region: us-east-1
      
      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.1"

      - name: Set TF_VAR_env
        run: echo "TF_VAR_env=$BRANCH_NAME" >> $GITHUB_ENV

        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          BRANCH_NAME: ${{ github.head_ref }}
          # DEPLOY_ENVIRONMENT: ${{ job.env }}

      - name: environment variable
        run: echo "Environment is $TF_VAR_env"
      - name: Terraform init
        run: terraform init -backend-config="bucket=$BUCKET_NAME" -backend-config="key=terraform/${TF_VAR_env}/terraform.tfstate"
        working-directory: ${{ env.TF_DIR }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get existing Lambda layer ARN
        id: get_current_arn
        run: |
          ARN=$(aws lambda list-layer-versions \
          --layer-name dependency_layer \
          --query 'LayerVersions[?LayerVersionArn!=`null`].[LayerVersionArn]' \
          --output text | head -n 1 | xargs)
          echo "EXISTING_ARN=$ARN" >> $GITHUB_ENV
          echo $ARN 

      - name: Ensure python folder exists
        run: mkdir -p python          

      - name: Cache pip packages
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: python
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        if: steps.cache-pip.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss"
          pip install -r requirements.txt -t python

      - name: Create layer.zip
        run: |
          zip -r ${{ env.TF_DIR }}/layer.zip python/
          rm -rf python

      - name: Terraform plan
        run: terraform plan -out=tfplan
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform apply
        run: terraform apply tfplan
        working-directory: ${{ env.TF_DIR }}
